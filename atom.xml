<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Melhore.me</title>
  <subtitle>Nex-gen Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.melhore.me/"/>
  <updated>2016-04-08T01:46:14.293Z</updated>
  <id>http://blog.melhore.me/</id>
  
  <author>
    <name>Raul Leite</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Travis com Docker, Testes e Chrome</title>
    <link href="http://blog.melhore.me/2016/04/07/Travis-com-Docker-Testes-e-Chrome/"/>
    <id>http://blog.melhore.me/2016/04/07/Travis-com-Docker-Testes-e-Chrome/</id>
    <published>2016-04-07T22:45:20.000Z</published>
    <updated>2016-04-08T01:46:14.293Z</updated>
    
    <content type="html">&lt;p&gt;Recentemente me deparei com alguns desafios e armadilhas para rodar os meus testes “End to End”, no ambiente sem GUI como o Docker, e a instância do próprio Travis. &lt;/p&gt;
&lt;p&gt;O Browser é naturalmente necessário pra simular a interação do usuário no caso de testes e2e, mas também para os testes unitários, uma vez que no meu caso estava utilizando Karma localmente, configurado para rodar em browser e eu queria manter o ambiente homogêneo, ao do CI (Integração Contínua).&lt;/p&gt;
&lt;p&gt;Em momento oportuno, gostaria de escrever com mais calma sobre a integração Travis, Docker, Mongo e Node, mas o desafio maior foi como rodar o Browser no ambiente Docker e Travis.&lt;/p&gt;
&lt;h2 id=&quot;Alternativas&quot;&gt;&lt;a href=&quot;#Alternativas&quot; class=&quot;headerlink&quot; title=&quot;Alternativas&quot;&gt;&lt;/a&gt;Alternativas&lt;/h2&gt;&lt;p&gt;Por opção pessoal preferi partir de uma imagem &lt;em&gt;ubuntu&lt;/em&gt;, como base no Dockerfile. Mas é bom saber, que existem algumas imagens que possuem Selenium e Chrome já pré configuradas pelo &lt;a href=&quot;https://hub.docker.com/search/?isAutomated=0&amp;amp;isOfficial=0&amp;amp;page=1&amp;amp;pullCount=0&amp;amp;q=selenium+chrome&amp;amp;starCount=0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Hub&lt;/a&gt;, porém eu não cheguei a testá-las. Se você optar por estas, talvez possa pular algumas configurações abaixo. Agora, se você é igual eu, que gosta de ter controle total “da sua imagem” (em qualquer sentido que queira interpretar), vamos ao passo a passo:&lt;/p&gt;
&lt;h2 id=&quot;Java-e-Chrome&quot;&gt;&lt;a href=&quot;#Java-e-Chrome&quot; class=&quot;headerlink&quot; title=&quot;Java e Chrome&quot;&gt;&lt;/a&gt;Java e Chrome&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Dockerfile&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Necessário para Selenium&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ENV JAVA_HOME /usr/lib/jvm/java-1.7.0-openjdk-amd64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get install -y --force-yes openjdk-7-jdk --no-install-recommends&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Deixarei aqui também, a maneira que instalei o Chrome e suas dependências:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Dockerfile&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN dpkg -i google-chrome*.deb || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get install &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Se tentar rodar agora, dará erro, pois o sistema tentará abrir o Browser (graficamente), e não vai conseguir.&lt;/p&gt;
&lt;h2 id=&quot;X-virtual-framebuffer&quot;&gt;&lt;a href=&quot;#X-virtual-framebuffer&quot; class=&quot;headerlink&quot; title=&quot;X virtual framebuffer&quot;&gt;&lt;/a&gt;X virtual framebuffer&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.x.org/archive/X11R7.6/doc/man/man1/Xvfb.1.xhtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;X virtual framebuffer, ou Xvfb&lt;/a&gt;, é um display server que implementa o protocolo X11. Em contraste com outros display servers, Xvfb realiza todas as operações gráficas em memória sem apresentar qualquer saída de tela.&lt;/p&gt;
&lt;p&gt;Ou seja, este é o ponto principal deste post. Graças ao Xvfb, será possível rodar o nosso Chrome que acabamos de instalar, em memória, sem necessidade de representação gráfica.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Dockerfile&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Configura a porta display que o terminal, deve usar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ENV DISPLAY &lt;span class=&quot;string&quot;&gt;&quot;:99.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN apt-get install -y --no-install-recommends \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xfonts-base \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xvfb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Travis&quot;&gt;&lt;a href=&quot;#Travis&quot; class=&quot;headerlink&quot; title=&quot;Travis&quot;&gt;&lt;/a&gt;Travis&lt;/h2&gt;&lt;p&gt;No &lt;em&gt;.travis.yml&lt;/em&gt;, eu precisei fazer algumas configurações, as de exportar o Display, e o comando de chamar o Xvfb, eu &lt;strong&gt;precisei&lt;/strong&gt; repetir no container e no ambiente &lt;em&gt;travis&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; DISPLAY=:99.0
Xvfb :99.0 -extension RANDR &amp;gt; /dev/null &amp;amp;
docker &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; -it meuContainer Xvfb :99.0 -extension RANDR
&lt;span class=&quot;comment&quot;&gt;# Talvez você queira colocar alguma lógica pra saber quando o servidor Xvfb está de pé,&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# pra poder seguir pra próxima linha, ou então usar o simples sleep como abaixo. Dez segundos estaria ótimo.&lt;/span&gt;
sleep 10
&lt;span class=&quot;comment&quot;&gt;#...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se você, está enfrentando ou já enfrentou este tipo de problema na integração, ou se ficou alguma dúvida, não deixe de dar aquela comentada. Até mais!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Recentemente me deparei com alguns desafios e armadilhas para rodar os meus testes “End to End”, no ambiente sem GUI como o Docker, e a i
    
    </summary>
    
      <category term="Continuous Integration" scheme="http://blog.melhore.me/categories/Continuous-Integration/"/>
    
      <category term="travis" scheme="http://blog.melhore.me/categories/Continuous-Integration/travis/"/>
    
    
      <category term="travis" scheme="http://blog.melhore.me/tags/travis/"/>
    
      <category term="docker" scheme="http://blog.melhore.me/tags/docker/"/>
    
      <category term="tests" scheme="http://blog.melhore.me/tags/tests/"/>
    
      <category term="chrome" scheme="http://blog.melhore.me/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Angular Material: Aprendendo através da prática</title>
    <link href="http://blog.melhore.me/2016/03/22/Angular-Material-Aprendendo-atraves-da-pratica/"/>
    <id>http://blog.melhore.me/2016/03/22/Angular-Material-Aprendendo-atraves-da-pratica/</id>
    <published>2016-03-22T16:45:48.000Z</published>
    <updated>2016-03-23T14:46:06.747Z</updated>
    
    <content type="html">&lt;p&gt;Descobrindo na prática porque desenvolvedores e clientes ficam mais felizes com Angular Material  ｡◕‿‿◕｡&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/03/22/Angular-Material-Aprendendo-atraves-da-pratica/angular-material-top.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Esta é uma postagem inspirada em uma apresentação minha, na qual tive a finalidade, cuidado e prazer em demonstrar, com muita prática alguns dos principais conceitos que regem o Angular Material. Ao fim, teremos uma simples, porém funcional página de protótipo. Vamos então ver porque é possível (em minutos, no caso) apresentar algo ao nosso cliente, muito fiel ao produto final, e ainda salvar bastante do nosso tempo, podendo reaproveitar todo o código do protótipo, na etapa de desenvolvimento.&lt;/p&gt;
&lt;p&gt;O repositório está em meu github: &lt;a href=&quot;https://github.com/rauleite/angular-material-prototipo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/rauleite/angular-material-prototipo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Step-0-Preparando-ambiente&quot;&gt;&lt;a href=&quot;#Step-0-Preparando-ambiente&quot; class=&quot;headerlink&quot; title=&quot;Step 0 - Preparando ambiente&quot;&gt;&lt;/a&gt;Step 0 - Preparando ambiente&lt;/h2&gt;&lt;p&gt;Se você já tem o node e npm instaldo em sua máquina, pode pular este processo. Caso contrário, pode optar por uma das duas alternativas de instalação:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/package-manager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org/en/download/package-manager&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Para instalar com Node Virtual Manager:&lt;br&gt;&lt;a href=&quot;https://github.com/creationix/nvm#install-script&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/creationix/nvm#install-script&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;ps. talvez precise usar o npm como super user (como ‘sudo npm’);&lt;/em&gt;&lt;br&gt;&lt;em&gt;(embora não seja recomendado usar desta maneira, não interfere nos propósitos deste tutorial)&lt;/em&gt; &lt;/p&gt;
&lt;h4 id=&quot;Clonando-o-projeto&quot;&gt;&lt;a href=&quot;#Clonando-o-projeto&quot; class=&quot;headerlink&quot; title=&quot;Clonando o projeto&quot;&gt;&lt;/a&gt;Clonando o projeto&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git clone https://github.com/raul010/angular-material-prototipo.git&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd angular-material-prototipo&lt;/code&gt; &lt;/p&gt;
&lt;h4 id=&quot;Install-Dependencies&quot;&gt;&lt;a href=&quot;#Install-Dependencies&quot; class=&quot;headerlink&quot; title=&quot;Install Dependencies&quot;&gt;&lt;/a&gt;Install Dependencies&lt;/h4&gt;&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;Start-Server&quot;&gt;&lt;a href=&quot;#Start-Server&quot; class=&quot;headerlink&quot; title=&quot;Start Server&quot;&gt;&lt;/a&gt;Start Server&lt;/h4&gt;&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;* Listening port 3000…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Abra: &lt;a href=&quot;http://localhost:3000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pronto, agora que já temos todo o projeto em mãos, vamos voltar ele no tempo, e ir avançando passo a passo, com mais calma.&lt;/p&gt;
&lt;h2 id=&quot;Step-1-Hello-Angular&quot;&gt;&lt;a href=&quot;#Step-1-Hello-Angular&quot; class=&quot;headerlink&quot; title=&quot;Step 1 - Hello Angular&quot;&gt;&lt;/a&gt;Step 1 - Hello Angular&lt;/h2&gt;&lt;p&gt;Dentro do diretório do projeto (&lt;em&gt;angular-material-prototipo&lt;/em&gt;):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -f step-001&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;* Listening port 3000…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Abra: &lt;a href=&quot;http://localhost:3000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bem, pra facilitar, há apenas dois arquivos que nos interessam no decorrer de todo o decorrer do projeto. O &lt;em&gt;public/index.html&lt;/em&gt; e o &lt;em&gt;public/app-controller&lt;/em&gt;. Mais à frente serão adicionados arquivos de imagens (SVG’s), e um &lt;em&gt;style.css&lt;/em&gt; que pode ser completamente ignorado, pois sua única finalidade é colorir pra termos um visual mais sólido do layout, pra fins didáticos.&lt;/p&gt;
&lt;p&gt;Neste checkout que demos, o Angular foi inicializado e criamos um Controller:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;figcaption&gt;&lt;span&gt;public/index.html&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-app&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-cloak&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-controller&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;appController&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&amp;#123;hello&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;angular/angular.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;angular-aria/angular-aria.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;angular-animate/angular-animate.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;angular-material/angular-material.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app-controller.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Importante também, destacar que a ordem das dependências importam, assim também quais são as que o Angular Material, depende.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;O Controller e a inicialização do módulo Angular, propriamente dita:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;public/app-controller.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = angular.module(&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;ngMaterial&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.controller(&lt;span class=&quot;string&quot;&gt;&#39;appController&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;$scope&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $scope.hello = &lt;span class=&quot;string&quot;&gt;&#39;Hello Angular&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Aqui já definimos a dependência &lt;strong&gt;ngMaterial&lt;/strong&gt;, que usaremos logo mais.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Step-2-Hello-Angular-Material-Toolbar&quot;&gt;&lt;a href=&quot;#Step-2-Hello-Angular-Material-Toolbar&quot; class=&quot;headerlink&quot; title=&quot;Step 2 - Hello Angular Material - Toolbar&quot;&gt;&lt;/a&gt;Step 2 - Hello Angular Material - Toolbar&lt;/h2&gt;&lt;p&gt;Mesmos passos, apenas alternado de ‘step-001’, para ‘step-002’:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -f step-002&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;* Listening port 3000…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Destaque à maneira simples de adicionar o Toolbar:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;figcaption&gt;&lt;span&gt;public/index.html&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;md-toolbar&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;md-toolbar-tools&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;md-button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;md-icon-button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;aria-label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Settings&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;md-icon&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;md-svg-icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/icons/menu.svg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;md-icon&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;md-button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Toolbar with Icon Buttons&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;flex&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;md-button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;md-icon-button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;aria-label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Favorite&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;md-icon&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;md-svg-icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/icons/favorite.svg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;color: greenyellow;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;md-icon&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;md-button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;md-button&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;md-icon-button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;aria-label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;More&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;md-icon&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;md-svg-icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/icons/more_vert.svg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;md-icon&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;md-button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;md-toolbar&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Usamos a diretiva &lt;code&gt;&amp;lt;toolbar&amp;gt;&lt;/code&gt;, e no próximo elemento (div) adicionamos  a classe &lt;code&gt;md-toolbar-tools&lt;/code&gt; que faz os elementos dentro do toolbar, se ‘comportarem’ da maneira desejada. Também são adicionados três diretivas &lt;code&gt;&amp;lt;md-button&amp;gt;&lt;/code&gt;. Os dois últimos são separados pelo atributo &lt;code&gt;flex&lt;/code&gt;, do Angular Material, dentro da tag span. Dê uma olhada neste detalhe, no browser.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Angular Material trabalha com o Flexbox, do CSS3, que é uma nova forma de se trabalhar com layout. Perfeito para criação de &lt;em&gt;design’s responsivo&lt;/em&gt;. O browser recalcula os valores do layout, acomodando os elementos em seu local designado pelo programador, de maneira simples e natural. O Angular Material, utiliza-os por debaixo dos panos para você, e lhe fornece um controle &lt;strong&gt;declarativo&lt;/strong&gt; (lembre disto), através de atributos HTML, como foi o exemplo do &lt;code&gt;flex&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Isto ficará muito mais claro no Step 4, mas antes quebraremos um pouco falando sobre: Temas.&lt;/p&gt;
&lt;h2 id=&quot;Step-3-Tema&quot;&gt;&lt;a href=&quot;#Step-3-Tema&quot; class=&quot;headerlink&quot; title=&quot;Step 3 - Tema&quot;&gt;&lt;/a&gt;Step 3 - Tema&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git checkout -f step-003&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.config(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$mdThemingProvider&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $mdThemingProvider.theme(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .primaryPalette(&lt;span class=&quot;string&quot;&gt;&#39;pink&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .accentPalette(&lt;span class=&quot;string&quot;&gt;&#39;orange&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Ao contrário dos Controllers, a área de configuração do Angular &lt;code&gt;app.config(...);&lt;/code&gt; só rodam na fase de bootstrap da aplicação. Uma vez quando ela inicia. Local ideal, portanto, pra residir as configurações sobre o tema, do Angular Material.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Os temas são definidos por paletas, de maneira simples, podemos mudar as cores primárias e secundárias, e caso prefira ter um controle de granularidade maior, o Framework te dá todo o suporte, de maneira simples e prática. Você pode também, definir diversos valores padrões, e chamá-los declarativamente, direto do seu html.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/03/22/Angular-Material-Aprendendo-atraves-da-pratica/angular-material-pallete.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Para não nos estendermos além do foco proposto, utilizamos a forma básica para alterar alguns padrões de cores. A primária &lt;code&gt;primaryPalette&lt;/code&gt; deixa de ser &lt;em&gt;indigo&lt;/em&gt; (que é o default), para ser &lt;em&gt;pink&lt;/em&gt;, e a secundária &lt;code&gt;accentPalette&lt;/code&gt;, passa a ser &lt;em&gt;orange&lt;/em&gt;. Veja a nossa toolbarno browser, agora.&lt;/p&gt;
&lt;p&gt;Para maiores detalhes, não deixe de dar uma sondada na &lt;a href=&quot;https://material.angularjs.org/latest/Theming/03_configuring_a_theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentação&lt;/a&gt;, ela é bem explicativa e repleta de exemplos práticos.&lt;/p&gt;
&lt;h2 id=&quot;Step-4-Layout&quot;&gt;&lt;a href=&quot;#Step-4-Layout&quot; class=&quot;headerlink&quot; title=&quot;Step 4 - Layout&quot;&gt;&lt;/a&gt;Step 4 - Layout&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git checkout -f step-004&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Esta é a parte que eu acho mais importantes entendermos bem, pelo fato do Angular Material, propor uma separação de conceitos, não tradicional até então. Bora pro exemplo, que é a melhor maneira de enteder:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;figcaption&gt;&lt;span&gt;public/index.html&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;layout&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;row&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;layout-fill&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;flex&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;30&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;layout&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;column&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boxWithHeight&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;layout-padding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flex=&quot;30&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;flex&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;flex=&quot;40&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;flex&lt;/span&gt;&amp;gt;&lt;/span&gt;flex&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;flex&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;layout&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;column&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boxWithHeight&quot;&lt;/span&gt;  &lt;span class=&quot;attr&quot;&gt;layout-padding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;flex&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;70&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;flex=&quot;70&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;flex&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;flex=&quot;20&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;flex&lt;/span&gt; &amp;gt;&lt;/span&gt;flex &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;O Angular Material separa o que é layout, do resto. Se antigamente a parte de layout (disposição dos elementos renderizados na tela) ficava também no CSS, junto com todo o resto (definições de alteração de elementos, como cores e tipografia), agora com o Angular Material, não. Toda a questão de layout, que como vimos, faz uso extensivo de Flexbox, deve ser &lt;strong&gt;declarado&lt;/strong&gt; (lembra que eu pedi pra lembrar? ;)) via atributo dentro da tag html.&lt;/p&gt;
&lt;p&gt;Segundo ponto importante a se observar, é que o “layout pai”, deve declar como ele quer que esteja a disposição na tela, dos seus elementos filhos. Se “em linha” &lt;code&gt;layout=row&lt;/code&gt;, ou “em coluna” &lt;code&gt;layout=column&lt;/code&gt;. Não deixe de clicar &lt;a href=&quot;https://material.angularjs.org/latest/layout/container&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;neste exemplo&lt;/a&gt;, para ter uma noção visual e prática, através do código. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/03/22/Angular-Material-Aprendendo-atraves-da-pratica/angular-material-flexbox-layouts.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Por fim, o flex é calculado pelo Browser. Você só precisa declarar um valor à ele, estes valores representam porcentagens do espaço que você quer que ele ocupe no browser renderizado. Você também pode omitir estes valores, definindo desta forma que ele ocupe todo o “resto que sobrou da tela”. No exemplo das três sections mais abaixo, eles estarão alinhados em coluna, pelo elemento pai &lt;code&gt;layout=&amp;quot;column&amp;quot;&lt;/code&gt;, o primeiro ocupará &lt;code&gt;flex=70&lt;/code&gt;, o segundo &lt;code&gt;flex=20&lt;/code&gt;, e o terceiro não está atribuído valor &lt;code&gt;flex&lt;/code&gt;, mas sabemos que é 10, pois foi o que sobrou na tela, 70 + 20 + 10 = 100%.&lt;/p&gt;
&lt;p&gt;【ツ】&lt;/p&gt;
&lt;h2 id=&quot;Step-5-Resposividade&quot;&gt;&lt;a href=&quot;#Step-5-Resposividade&quot; class=&quot;headerlink&quot; title=&quot;Step 5 - Resposividade&quot;&gt;&lt;/a&gt;Step 5 - Resposividade&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git checkout -f step-005&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;figcaption&gt;&lt;span&gt;public/index.html&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;flex&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;30&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;layout&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;column&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;hide-xs&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boxWithHeight&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;layout-padding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Pra finalizar de maneira leve, apenas entramos um pouco mais a fundo na responsividade do Framework, demonstrando a maneira como ele mostra, ou esconde elementos, de acordo com o tamanho da resolução pré-definida pelo Angular Material, considerando um padrão dentre os principais tamanhos de tela e resolução, como PC, tablets ou celular, porém também permitindo um nível mais baixo de customização, onde você pode definir os tamanhos.&lt;/p&gt;
&lt;p&gt;Bem, no caso escondemos este elemento &lt;em&gt;div&lt;/em&gt; em telas muito pequenas (&lt;em&gt;extra small&lt;/em&gt;), através do atributo &lt;code&gt;hide-xs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podemos por exemplo fazer isto: &lt;code&gt;layout-xs=column&lt;/code&gt;. Simplesmente definimos dinamicamente, ou seja, de acordo com o “tamanho da tela”, se um layout é linha (default), ou coluna. Se a tela for pequena (extra small / xs), como a de um celular, ou smarthphone, todo o layout da sua página muda considerando como se este atributo fosse um &lt;code&gt;layout=column&lt;/code&gt;. Para dispositivos e resolução maiores, o layout assumido será o default, que é equivalente ao &lt;code&gt;layout=row&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/03/22/Angular-Material-Aprendendo-atraves-da-pratica/angular-material-xs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://material.angularjs.org/latest/layout/options&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clique aqui, para maiores detalhes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bem, ao final temos um resultado bem legal, funcional e responsivo. Teste em outras resoluções, reduza e aumente o tamanho da janela do seu navegador, deixe bem pequena e notará que o layout está bem fluído e com elementos que se escondem. Espero através deste tutorial ter passado uma sólida noção sobre o Angular Material, não deixem de comentar e manter contato. Obrigado!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Descobrindo na prática porque desenvolvedores e clientes ficam mais felizes com Angular Material  ｡◕‿‿◕｡&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/03/22/Ang
    
    </summary>
    
      <category term="Javascript" scheme="http://blog.melhore.me/categories/Javascript/"/>
    
      <category term="Front-end" scheme="http://blog.melhore.me/categories/Javascript/Front-end/"/>
    
      <category term="Web Components" scheme="http://blog.melhore.me/categories/Javascript/Front-end/Web-Components/"/>
    
    
      <category term="angular" scheme="http://blog.melhore.me/tags/angular/"/>
    
      <category term="angular material" scheme="http://blog.melhore.me/tags/angular-material/"/>
    
      <category term="material design" scheme="http://blog.melhore.me/tags/material-design/"/>
    
      <category term="javascript" scheme="http://blog.melhore.me/tags/javascript/"/>
    
      <category term="html5" scheme="http://blog.melhore.me/tags/html5/"/>
    
      <category term="css3" scheme="http://blog.melhore.me/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>Hexo: Framework Blog para Node.js</title>
    <link href="http://blog.melhore.me/2016/03/21/Hexo-Framework-Blog-para-Nodejs/"/>
    <id>http://blog.melhore.me/2016/03/21/Hexo-Framework-Blog-para-Nodejs/</id>
    <published>2016-03-22T01:22:37.000Z</published>
    <updated>2016-03-22T17:18:26.146Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/2016/03/21/Hexo-Framework-Blog-para-Nodejs/hexo-logo.png&quot; alt=&quot;ScreenShot&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Static-Site-Generators&quot;&gt;&lt;a href=&quot;#Static-Site-Generators&quot; class=&quot;headerlink&quot; title=&quot;Static Site Generators&quot;&gt;&lt;/a&gt;Static Site Generators&lt;/h2&gt;&lt;p&gt;Antes das minhas atenções estarem voltadas aos badalados “Static Site Generators”, para criação de blogs geralmente baseados em &lt;a href=&quot;http://www.unexpected-vortices.com/sw/rippledoc/quick-markdown-example.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown&lt;/a&gt;, eu utilizava o velho Wordpress. Já vinha há um tempo saturado da plataforma, e agora finalmente pude voltar um pouco da minha atenção à eles.&lt;/p&gt;
&lt;p&gt;Os generators fornecem todo o controle que você precisa para criar, gerenciar e, claro… gerar artefatos para o seu blog, via &lt;a href=&quot;https://hexo.io/docs/commands.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linha de comando&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new &lt;span class=&quot;string&quot;&gt;&quot;Post metalinguístico sobre Hexo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Lista mais completas dos Static Generators, caso tenha curiosidade: &lt;a href=&quot;https://www.staticgen.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.staticgen.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h2&gt;&lt;p&gt;Olhei e testei repidamente alguns, com o critério inicial que rodasse em Node.js. Dentre eles principalmente o Heckle (Jekyll pra Node, ao invés de Ruby) e Poet, além do próprio &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo.io&lt;/a&gt;. Optei pelo último por parecer mais maduro, robusto, e atualmente possuir um constante ciclo de releases. &lt;/p&gt;
&lt;h2 id=&quot;Pros&quot;&gt;&lt;a href=&quot;#Pros&quot; class=&quot;headerlink&quot; title=&quot;Prós&quot;&gt;&lt;/a&gt;Prós&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2016/03/21/Hexo-Framework-Blog-para-Nodejs/hexo-themes.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Possui um bom suporte a &lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;temas&lt;/a&gt; e &lt;a href=&quot;https://hexo.io/docs/plugins.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;plugins&lt;/a&gt; de terceiros, open source. Além de poder incluir novas features, ele é 100% customizável, de fácil alteração e manuseio através do fonte. E como falei, em constantes releases.&lt;/p&gt;
&lt;h2 id=&quot;Contra&quot;&gt;&lt;a href=&quot;#Contra&quot; class=&quot;headerlink&quot; title=&quot;Contra&quot;&gt;&lt;/a&gt;Contra&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2016/03/21/Hexo-Framework-Blog-para-Nodejs/hexo-chinese.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Mas como nem tudo são flores, ressalto um nítido inconveniente. Ele tem um apelo muito grande na China. Embora o código fonte, documentação oficial etc, seja toda em inglês, existe uma comunidade ativa muito grande na web, entre os chineses. Como vimos nas aulas de Geografia (ou não) chineses não se preocupam lá tanto em utilizar a língua inglesa, como por exemplo nós brasileiros fazemos. Isto se não for pelo contrário, realmente fazem questão de não usar, utilizando por sua vez ideogramas (谷歌翻譯). Portanto, não estranhe no caso de você googlear sobre o ‘Hexo’ e se deparar com alguns ideogramas, ou mesmo em meio à comentários do fonte de algum plugin ou tema. No entanto, a aplicação é simples, é provável que você nem vá precisar traduzir algo ou tentar ler, mas em último caso, pode apelar ao google translate mesmo.&lt;/p&gt;
&lt;h2 id=&quot;Nuvem&quot;&gt;&lt;a href=&quot;#Nuvem&quot; class=&quot;headerlink&quot; title=&quot;Nuvem&quot;&gt;&lt;/a&gt;Nuvem&lt;/h2&gt;&lt;p&gt;Bom suporte à teste local, com autoreload e deploy em nuvem melhor ainda. No meu caso, estou hospedando no próprio Github e configurei o Hexo pra fazer o deploy direto lá. Também pode ser facilmente ‘deployado’ para Heroku, OpenShift, S3 da Amazon &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;entre outros&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- type: heroku&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Trocando-em-Miudos&quot;&gt;&lt;a href=&quot;#Trocando-em-Miudos&quot; class=&quot;headerlink&quot; title=&quot;Trocando em Miúdos&quot;&gt;&lt;/a&gt;Trocando em Miúdos&lt;/h2&gt;&lt;p&gt;Bem cruzando prós e contras, eu optei pelo Hexo, claro que ainda é cedo para uma conclusão definitiva, mas pelo menos comparado ao Wordpress que é o que eu costumava usar, claro que já é possível dizer sem medo de errar que é muito melhor, ágil e divertido trabalhar com Hexo e Node na máquina, do que Wordpress e PHP no browser. Também prevaleceu sobre os outros que rodam em Node, pois sua frequência de releases e comunidade, mesmo considerando o inconveniente citado, é muito maior.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2016/03/21/Hexo-Framework-Blog-para-Nodejs/hexo-logo.png&quot; alt=&quot;ScreenShot&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Static-Site-Generators&quot;&gt;&lt;a href=&quot;#Stat
    
    </summary>
    
      <category term="Javascript" scheme="http://blog.melhore.me/categories/Javascript/"/>
    
      <category term="Full-stack" scheme="http://blog.melhore.me/categories/Javascript/Full-stack/"/>
    
      <category term="Node.js" scheme="http://blog.melhore.me/categories/Javascript/Full-stack/Node-js/"/>
    
    
      <category term="javascript" scheme="http://blog.melhore.me/tags/javascript/"/>
    
      <category term="hexo" scheme="http://blog.melhore.me/tags/hexo/"/>
    
      <category term="blog" scheme="http://blog.melhore.me/tags/blog/"/>
    
      <category term="node.js" scheme="http://blog.melhore.me/tags/node-js/"/>
    
  </entry>
  
</feed>
